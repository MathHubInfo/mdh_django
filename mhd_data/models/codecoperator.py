import functools
import inspect

from django.db import models

from .codec import Codec


def codec_operator(constructor):
    """
        Turns the argument into a codec operator.
        A Codec Operator is a function that returns
        a pair of (codecClass, name).

        CodecClass should be a parent-less class
        representing a codec, and name should be
        the name of the dynamical generated
        class.
    """
    @functools.wraps(constructor)
    def wrapper(*args, **kwargs):
        clz, name = constructor(*args, **kwargs)
        return _make_applied_codec_operator(clz, name)
    return wrapper


def _make_applied_codec_operator(clz, name):
    if models.Model in inspect.getmro(clz):
        raise ValueError(
            'Class generated by Codec Operator should not inherit from model')

    # get the dict of the class and remove the appropriate properties
    clz = dict(clz.__dict__)

    # remove the module properties directly
    clz.pop('__dict__')
    clz.pop('__module__')
    clz.pop('__weakref__')

    # extract the CodecMeta class
    CodecMeta = clz.pop('Meta', object)

    # create a new Meta-class which inherits from the above two
    class Meta(Codec.Meta, CodecMeta):
        app_label = 'mhd_data'

    # setup the property dictionary
    attrs = {'__module__': 'mhd_data.models.codecs', 'Meta': Meta}
    attrs.update(clz)

    # create the new class
    return type(name, (Codec,), attrs)
